// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: note_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoteClient is the client API for Note service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteClient interface {
	GetNoteSettings(ctx context.Context, in *GetNoteSettingsRequest, opts ...grpc.CallOption) (*GetNoteSettingsResponse, error)
	SetNoteSettings(ctx context.Context, in *SetNoteSettingsRequest, opts ...grpc.CallOption) (*SetNoteSettingsResponse, error)
	GetNotesCount(ctx context.Context, in *GetNotesCountRequest, opts ...grpc.CallOption) (*GetNotesCountResponse, error)
	GetNotes(ctx context.Context, in *GetNotesRequest, opts ...grpc.CallOption) (*GetNotesResponse, error)
	ReadNotes(ctx context.Context, in *ReadNotesRequest, opts ...grpc.CallOption) (*ReadNotesResponse, error)
}

type noteClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteClient(cc grpc.ClientConnInterface) NoteClient {
	return &noteClient{cc}
}

func (c *noteClient) GetNoteSettings(ctx context.Context, in *GetNoteSettingsRequest, opts ...grpc.CallOption) (*GetNoteSettingsResponse, error) {
	out := new(GetNoteSettingsResponse)
	err := c.cc.Invoke(ctx, "/booking.Note/GetNoteSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) SetNoteSettings(ctx context.Context, in *SetNoteSettingsRequest, opts ...grpc.CallOption) (*SetNoteSettingsResponse, error) {
	out := new(SetNoteSettingsResponse)
	err := c.cc.Invoke(ctx, "/booking.Note/SetNoteSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetNotesCount(ctx context.Context, in *GetNotesCountRequest, opts ...grpc.CallOption) (*GetNotesCountResponse, error) {
	out := new(GetNotesCountResponse)
	err := c.cc.Invoke(ctx, "/booking.Note/GetNotesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetNotes(ctx context.Context, in *GetNotesRequest, opts ...grpc.CallOption) (*GetNotesResponse, error) {
	out := new(GetNotesResponse)
	err := c.cc.Invoke(ctx, "/booking.Note/GetNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) ReadNotes(ctx context.Context, in *ReadNotesRequest, opts ...grpc.CallOption) (*ReadNotesResponse, error) {
	out := new(ReadNotesResponse)
	err := c.cc.Invoke(ctx, "/booking.Note/ReadNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServer is the server API for Note service.
// All implementations must embed UnimplementedNoteServer
// for forward compatibility
type NoteServer interface {
	GetNoteSettings(context.Context, *GetNoteSettingsRequest) (*GetNoteSettingsResponse, error)
	SetNoteSettings(context.Context, *SetNoteSettingsRequest) (*SetNoteSettingsResponse, error)
	GetNotesCount(context.Context, *GetNotesCountRequest) (*GetNotesCountResponse, error)
	GetNotes(context.Context, *GetNotesRequest) (*GetNotesResponse, error)
	ReadNotes(context.Context, *ReadNotesRequest) (*ReadNotesResponse, error)
	mustEmbedUnimplementedNoteServer()
}

// UnimplementedNoteServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServer struct {
}

func (UnimplementedNoteServer) GetNoteSettings(context.Context, *GetNoteSettingsRequest) (*GetNoteSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteSettings not implemented")
}
func (UnimplementedNoteServer) SetNoteSettings(context.Context, *SetNoteSettingsRequest) (*SetNoteSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNoteSettings not implemented")
}
func (UnimplementedNoteServer) GetNotesCount(context.Context, *GetNotesCountRequest) (*GetNotesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesCount not implemented")
}
func (UnimplementedNoteServer) GetNotes(context.Context, *GetNotesRequest) (*GetNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotes not implemented")
}
func (UnimplementedNoteServer) ReadNotes(context.Context, *ReadNotesRequest) (*ReadNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotes not implemented")
}
func (UnimplementedNoteServer) mustEmbedUnimplementedNoteServer() {}

// UnsafeNoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServer will
// result in compilation errors.
type UnsafeNoteServer interface {
	mustEmbedUnimplementedNoteServer()
}

func RegisterNoteServer(s grpc.ServiceRegistrar, srv NoteServer) {
	s.RegisterService(&Note_ServiceDesc, srv)
}

func _Note_GetNoteSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetNoteSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.Note/GetNoteSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetNoteSettings(ctx, req.(*GetNoteSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_SetNoteSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNoteSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).SetNoteSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.Note/SetNoteSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).SetNoteSettings(ctx, req.(*SetNoteSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetNotesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetNotesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.Note/GetNotesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetNotesCount(ctx, req.(*GetNotesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.Note/GetNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetNotes(ctx, req.(*GetNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_ReadNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).ReadNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.Note/ReadNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).ReadNotes(ctx, req.(*ReadNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Note_ServiceDesc is the grpc.ServiceDesc for Note service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Note_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.Note",
	HandlerType: (*NoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNoteSettings",
			Handler:    _Note_GetNoteSettings_Handler,
		},
		{
			MethodName: "SetNoteSettings",
			Handler:    _Note_SetNoteSettings_Handler,
		},
		{
			MethodName: "GetNotesCount",
			Handler:    _Note_GetNotesCount_Handler,
		},
		{
			MethodName: "GetNotes",
			Handler:    _Note_GetNotes_Handler,
		},
		{
			MethodName: "ReadNotes",
			Handler:    _Note_ReadNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note_service.proto",
}
