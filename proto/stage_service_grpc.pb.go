// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: stage_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StageServiceClient is the client API for StageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StageServiceClient interface {
	GetListStages(ctx context.Context, in *GetListStagesRequest, opts ...grpc.CallOption) (*GetListStagesResponse, error)
	CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error)
	UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error)
	RemoveStage(ctx context.Context, in *RemoveStageRequest, opts ...grpc.CallOption) (*RemoveStageResponse, error)
	CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*IssueIDMessage, error)
	UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	RemoveIssue(ctx context.Context, in *IssueIDMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStageServiceClient(cc grpc.ClientConnInterface) StageServiceClient {
	return &stageServiceClient{cc}
}

func (c *stageServiceClient) GetListStages(ctx context.Context, in *GetListStagesRequest, opts ...grpc.CallOption) (*GetListStagesResponse, error) {
	out := new(GetListStagesResponse)
	err := c.cc.Invoke(ctx, "/booking.StageService/GetListStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stageServiceClient) CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error) {
	out := new(CreateStageResponse)
	err := c.cc.Invoke(ctx, "/booking.StageService/CreateStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stageServiceClient) UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error) {
	out := new(UpdateStageResponse)
	err := c.cc.Invoke(ctx, "/booking.StageService/UpdateStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stageServiceClient) RemoveStage(ctx context.Context, in *RemoveStageRequest, opts ...grpc.CallOption) (*RemoveStageResponse, error) {
	out := new(RemoveStageResponse)
	err := c.cc.Invoke(ctx, "/booking.StageService/RemoveStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stageServiceClient) CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*IssueIDMessage, error) {
	out := new(IssueIDMessage)
	err := c.cc.Invoke(ctx, "/booking.StageService/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stageServiceClient) UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/booking.StageService/UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stageServiceClient) RemoveIssue(ctx context.Context, in *IssueIDMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/booking.StageService/RemoveIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StageServiceServer is the server API for StageService service.
// All implementations must embed UnimplementedStageServiceServer
// for forward compatibility
type StageServiceServer interface {
	GetListStages(context.Context, *GetListStagesRequest) (*GetListStagesResponse, error)
	CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error)
	UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error)
	RemoveStage(context.Context, *RemoveStageRequest) (*RemoveStageResponse, error)
	CreateIssue(context.Context, *CreateIssueRequest) (*IssueIDMessage, error)
	UpdateIssue(context.Context, *UpdateIssueRequest) (*Issue, error)
	RemoveIssue(context.Context, *IssueIDMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedStageServiceServer()
}

// UnimplementedStageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStageServiceServer struct {
}

func (UnimplementedStageServiceServer) GetListStages(context.Context, *GetListStagesRequest) (*GetListStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListStages not implemented")
}
func (UnimplementedStageServiceServer) CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStage not implemented")
}
func (UnimplementedStageServiceServer) UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStage not implemented")
}
func (UnimplementedStageServiceServer) RemoveStage(context.Context, *RemoveStageRequest) (*RemoveStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStage not implemented")
}
func (UnimplementedStageServiceServer) CreateIssue(context.Context, *CreateIssueRequest) (*IssueIDMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (UnimplementedStageServiceServer) UpdateIssue(context.Context, *UpdateIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssue not implemented")
}
func (UnimplementedStageServiceServer) RemoveIssue(context.Context, *IssueIDMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIssue not implemented")
}
func (UnimplementedStageServiceServer) mustEmbedUnimplementedStageServiceServer() {}

// UnsafeStageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StageServiceServer will
// result in compilation errors.
type UnsafeStageServiceServer interface {
	mustEmbedUnimplementedStageServiceServer()
}

func RegisterStageServiceServer(s grpc.ServiceRegistrar, srv StageServiceServer) {
	s.RegisterService(&StageService_ServiceDesc, srv)
}

func _StageService_GetListStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).GetListStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/GetListStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).GetListStages(ctx, req.(*GetListStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StageService_CreateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).CreateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/CreateStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).CreateStage(ctx, req.(*CreateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StageService_UpdateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).UpdateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/UpdateStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).UpdateStage(ctx, req.(*UpdateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StageService_RemoveStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).RemoveStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/RemoveStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).RemoveStage(ctx, req.(*RemoveStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StageService_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/CreateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).CreateIssue(ctx, req.(*CreateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StageService_UpdateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).UpdateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/UpdateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).UpdateIssue(ctx, req.(*UpdateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StageService_RemoveIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).RemoveIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.StageService/RemoveIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).RemoveIssue(ctx, req.(*IssueIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// StageService_ServiceDesc is the grpc.ServiceDesc for StageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.StageService",
	HandlerType: (*StageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListStages",
			Handler:    _StageService_GetListStages_Handler,
		},
		{
			MethodName: "CreateStage",
			Handler:    _StageService_CreateStage_Handler,
		},
		{
			MethodName: "UpdateStage",
			Handler:    _StageService_UpdateStage_Handler,
		},
		{
			MethodName: "RemoveStage",
			Handler:    _StageService_RemoveStage_Handler,
		},
		{
			MethodName: "CreateIssue",
			Handler:    _StageService_CreateIssue_Handler,
		},
		{
			MethodName: "UpdateIssue",
			Handler:    _StageService_UpdateIssue_Handler,
		},
		{
			MethodName: "RemoveIssue",
			Handler:    _StageService_RemoveIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stage_service.proto",
}
