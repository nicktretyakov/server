// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: final_report.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinalReportServiceClient is the client API for FinalReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinalReportServiceClient interface {
	SendReport(ctx context.Context, in *SendFinalReportRequest, opts ...grpc.CallOption) (*SendFinalReportResponse, error)
}

type finalReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinalReportServiceClient(cc grpc.ClientConnInterface) FinalReportServiceClient {
	return &finalReportServiceClient{cc}
}

func (c *finalReportServiceClient) SendReport(ctx context.Context, in *SendFinalReportRequest, opts ...grpc.CallOption) (*SendFinalReportResponse, error) {
	out := new(SendFinalReportResponse)
	err := c.cc.Invoke(ctx, "/booking.FinalReportService/SendReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinalReportServiceServer is the server API for FinalReportService service.
// All implementations must embed UnimplementedFinalReportServiceServer
// for forward compatibility
type FinalReportServiceServer interface {
	SendReport(context.Context, *SendFinalReportRequest) (*SendFinalReportResponse, error)
	mustEmbedUnimplementedFinalReportServiceServer()
}

// UnimplementedFinalReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinalReportServiceServer struct {
}

func (UnimplementedFinalReportServiceServer) SendReport(context.Context, *SendFinalReportRequest) (*SendFinalReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReport not implemented")
}
func (UnimplementedFinalReportServiceServer) mustEmbedUnimplementedFinalReportServiceServer() {}

// UnsafeFinalReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinalReportServiceServer will
// result in compilation errors.
type UnsafeFinalReportServiceServer interface {
	mustEmbedUnimplementedFinalReportServiceServer()
}

func RegisterFinalReportServiceServer(s grpc.ServiceRegistrar, srv FinalReportServiceServer) {
	s.RegisterService(&FinalReportService_ServiceDesc, srv)
}

func _FinalReportService_SendReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFinalReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalReportServiceServer).SendReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.FinalReportService/SendReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalReportServiceServer).SendReport(ctx, req.(*SendFinalReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinalReportService_ServiceDesc is the grpc.ServiceDesc for FinalReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinalReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.FinalReportService",
	HandlerType: (*FinalReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReport",
			Handler:    _FinalReportService_SendReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "final_report.proto",
}
