// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: room_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	CreateInitialRoom(ctx context.Context, in *CreateInitialRoomRequest, opts ...grpc.CallOption) (*CreateInitialRoomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error)
	AddRoomSlots(ctx context.Context, in *AddRoomSlotsRequest, opts ...grpc.CallOption) (*AddRoomSlotsResponse, error)
	AddRoomEquipments(ctx context.Context, in *AddRoomEquipmentsRequest, opts ...grpc.CallOption) (*AddRoomEquipmentsResponse, error)
	UpdateRoomSlot(ctx context.Context, in *UpdateRoomSlotRequest, opts ...grpc.CallOption) (*UpdateRoomSlotResponse, error)
	UpdateRoomEquipment(ctx context.Context, in *UpdateRoomEquipmentRequest, opts ...grpc.CallOption) (*UpdateRoomEquipmentResponse, error)
	RemoveRoomSlot(ctx context.Context, in *RemoveRoomSlotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRoomEquipment(ctx context.Context, in *RemoveRoomEquipmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error)
	GetArchivedRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	AddRelease(ctx context.Context, in *AddReleaseRequest, opts ...grpc.CallOption) (*AddReleaseResponse, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseResponse, error)
	RemoveRelease(ctx context.Context, in *RemoveReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeRoomStatus(ctx context.Context, in *ChangeRoomStatusRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	PrepareReportData(ctx context.Context, in *PrepareReportDataRequest, opts ...grpc.CallOption) (*PrepareReportDataResponse, error)
	// rpc ExportRoomsToExcel (google.protobuf.Empty) returns (ExportRoomsToExcelResponse) {}
	SetRoomArchived(ctx context.Context, in *SetRoomArchivedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetRoomPublished(ctx context.Context, in *SetRoomPublishedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) CreateInitialRoom(ctx context.Context, in *CreateInitialRoomRequest, opts ...grpc.CallOption) (*CreateInitialRoomResponse, error) {
	out := new(CreateInitialRoomResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/CreateInitialRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error) {
	out := new(UpdateRoomResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddRoomSlots(ctx context.Context, in *AddRoomSlotsRequest, opts ...grpc.CallOption) (*AddRoomSlotsResponse, error) {
	out := new(AddRoomSlotsResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/AddRoomSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddRoomEquipments(ctx context.Context, in *AddRoomEquipmentsRequest, opts ...grpc.CallOption) (*AddRoomEquipmentsResponse, error) {
	out := new(AddRoomEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/AddRoomEquipments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoomSlot(ctx context.Context, in *UpdateRoomSlotRequest, opts ...grpc.CallOption) (*UpdateRoomSlotResponse, error) {
	out := new(UpdateRoomSlotResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/UpdateRoomSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoomEquipment(ctx context.Context, in *UpdateRoomEquipmentRequest, opts ...grpc.CallOption) (*UpdateRoomEquipmentResponse, error) {
	out := new(UpdateRoomEquipmentResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/UpdateRoomEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RemoveRoomSlot(ctx context.Context, in *RemoveRoomSlotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/booking.RoomService/RemoveRoomSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RemoveRoomEquipment(ctx context.Context, in *RemoveRoomEquipmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/booking.RoomService/RemoveRoomEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetArchivedRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/GetArchivedRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddRelease(ctx context.Context, in *AddReleaseRequest, opts ...grpc.CallOption) (*AddReleaseResponse, error) {
	out := new(AddReleaseResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/AddRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseResponse, error) {
	out := new(UpdateReleaseResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/UpdateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RemoveRelease(ctx context.Context, in *RemoveReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/booking.RoomService/RemoveRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) ChangeRoomStatus(ctx context.Context, in *ChangeRoomStatusRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/ChangeRoomStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) PrepareReportData(ctx context.Context, in *PrepareReportDataRequest, opts ...grpc.CallOption) (*PrepareReportDataResponse, error) {
	out := new(PrepareReportDataResponse)
	err := c.cc.Invoke(ctx, "/booking.RoomService/PrepareReportData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) SetRoomArchived(ctx context.Context, in *SetRoomArchivedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/booking.RoomService/SetRoomArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) SetRoomPublished(ctx context.Context, in *SetRoomPublishedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/booking.RoomService/SetRoomPublished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	CreateInitialRoom(context.Context, *CreateInitialRoomRequest) (*CreateInitialRoomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	AddRoomSlots(context.Context, *AddRoomSlotsRequest) (*AddRoomSlotsResponse, error)
	AddRoomEquipments(context.Context, *AddRoomEquipmentsRequest) (*AddRoomEquipmentsResponse, error)
	UpdateRoomSlot(context.Context, *UpdateRoomSlotRequest) (*UpdateRoomSlotResponse, error)
	UpdateRoomEquipment(context.Context, *UpdateRoomEquipmentRequest) (*UpdateRoomEquipmentResponse, error)
	RemoveRoomSlot(context.Context, *RemoveRoomSlotRequest) (*emptypb.Empty, error)
	RemoveRoomEquipment(context.Context, *RemoveRoomEquipmentRequest) (*emptypb.Empty, error)
	GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error)
	GetArchivedRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	AddRelease(context.Context, *AddReleaseRequest) (*AddReleaseResponse, error)
	UpdateRelease(context.Context, *UpdateReleaseRequest) (*UpdateReleaseResponse, error)
	RemoveRelease(context.Context, *RemoveReleaseRequest) (*emptypb.Empty, error)
	ChangeRoomStatus(context.Context, *ChangeRoomStatusRequest) (*GetRoomResponse, error)
	PrepareReportData(context.Context, *PrepareReportDataRequest) (*PrepareReportDataResponse, error)
	// rpc ExportRoomsToExcel (google.protobuf.Empty) returns (ExportRoomsToExcelResponse) {}
	SetRoomArchived(context.Context, *SetRoomArchivedRequest) (*emptypb.Empty, error)
	SetRoomPublished(context.Context, *SetRoomPublishedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) CreateInitialRoom(context.Context, *CreateInitialRoomRequest) (*CreateInitialRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInitialRoom not implemented")
}
func (UnimplementedRoomServiceServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedRoomServiceServer) AddRoomSlots(context.Context, *AddRoomSlotsRequest) (*AddRoomSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomSlots not implemented")
}
func (UnimplementedRoomServiceServer) AddRoomEquipments(context.Context, *AddRoomEquipmentsRequest) (*AddRoomEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomEquipments not implemented")
}
func (UnimplementedRoomServiceServer) UpdateRoomSlot(context.Context, *UpdateRoomSlotRequest) (*UpdateRoomSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomSlot not implemented")
}
func (UnimplementedRoomServiceServer) UpdateRoomEquipment(context.Context, *UpdateRoomEquipmentRequest) (*UpdateRoomEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomEquipment not implemented")
}
func (UnimplementedRoomServiceServer) RemoveRoomSlot(context.Context, *RemoveRoomSlotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoomSlot not implemented")
}
func (UnimplementedRoomServiceServer) RemoveRoomEquipment(context.Context, *RemoveRoomEquipmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoomEquipment not implemented")
}
func (UnimplementedRoomServiceServer) GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomServiceServer) GetArchivedRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedRooms not implemented")
}
func (UnimplementedRoomServiceServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomServiceServer) AddRelease(context.Context, *AddReleaseRequest) (*AddReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelease not implemented")
}
func (UnimplementedRoomServiceServer) UpdateRelease(context.Context, *UpdateReleaseRequest) (*UpdateReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelease not implemented")
}
func (UnimplementedRoomServiceServer) RemoveRelease(context.Context, *RemoveReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRelease not implemented")
}
func (UnimplementedRoomServiceServer) ChangeRoomStatus(context.Context, *ChangeRoomStatusRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoomStatus not implemented")
}
func (UnimplementedRoomServiceServer) PrepareReportData(context.Context, *PrepareReportDataRequest) (*PrepareReportDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareReportData not implemented")
}
func (UnimplementedRoomServiceServer) SetRoomArchived(context.Context, *SetRoomArchivedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomArchived not implemented")
}
func (UnimplementedRoomServiceServer) SetRoomPublished(context.Context, *SetRoomPublishedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomPublished not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_CreateInitialRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInitialRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateInitialRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/CreateInitialRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateInitialRoom(ctx, req.(*CreateInitialRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddRoomSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddRoomSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/AddRoomSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddRoomSlots(ctx, req.(*AddRoomSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddRoomEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomEquipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddRoomEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/AddRoomEquipments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddRoomEquipments(ctx, req.(*AddRoomEquipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoomSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoomSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/UpdateRoomSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoomSlot(ctx, req.(*UpdateRoomSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoomEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoomEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/UpdateRoomEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoomEquipment(ctx, req.(*UpdateRoomEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RemoveRoomSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoomSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RemoveRoomSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/RemoveRoomSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RemoveRoomSlot(ctx, req.(*RemoveRoomSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RemoveRoomEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoomEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RemoveRoomEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/RemoveRoomEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RemoveRoomEquipment(ctx, req.(*RemoveRoomEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetArchivedRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetArchivedRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/GetArchivedRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetArchivedRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/AddRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddRelease(ctx, req.(*AddReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRelease(ctx, req.(*UpdateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RemoveRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RemoveRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/RemoveRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RemoveRelease(ctx, req.(*RemoveReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_ChangeRoomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoomStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).ChangeRoomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/ChangeRoomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).ChangeRoomStatus(ctx, req.(*ChangeRoomStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_PrepareReportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReportDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).PrepareReportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/PrepareReportData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).PrepareReportData(ctx, req.(*PrepareReportDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_SetRoomArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).SetRoomArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/SetRoomArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).SetRoomArchived(ctx, req.(*SetRoomArchivedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_SetRoomPublished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomPublishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).SetRoomPublished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.RoomService/SetRoomPublished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).SetRoomPublished(ctx, req.(*SetRoomPublishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInitialRoom",
			Handler:    _RoomService_CreateInitialRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _RoomService_UpdateRoom_Handler,
		},
		{
			MethodName: "AddRoomSlots",
			Handler:    _RoomService_AddRoomSlots_Handler,
		},
		{
			MethodName: "AddRoomEquipments",
			Handler:    _RoomService_AddRoomEquipments_Handler,
		},
		{
			MethodName: "UpdateRoomSlot",
			Handler:    _RoomService_UpdateRoomSlot_Handler,
		},
		{
			MethodName: "UpdateRoomEquipment",
			Handler:    _RoomService_UpdateRoomEquipment_Handler,
		},
		{
			MethodName: "RemoveRoomSlot",
			Handler:    _RoomService_RemoveRoomSlot_Handler,
		},
		{
			MethodName: "RemoveRoomEquipment",
			Handler:    _RoomService_RemoveRoomEquipment_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _RoomService_GetRooms_Handler,
		},
		{
			MethodName: "GetArchivedRooms",
			Handler:    _RoomService_GetArchivedRooms_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _RoomService_GetRoom_Handler,
		},
		{
			MethodName: "AddRelease",
			Handler:    _RoomService_AddRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _RoomService_UpdateRelease_Handler,
		},
		{
			MethodName: "RemoveRelease",
			Handler:    _RoomService_RemoveRelease_Handler,
		},
		{
			MethodName: "ChangeRoomStatus",
			Handler:    _RoomService_ChangeRoomStatus_Handler,
		},
		{
			MethodName: "PrepareReportData",
			Handler:    _RoomService_PrepareReportData_Handler,
		},
		{
			MethodName: "SetRoomArchived",
			Handler:    _RoomService_SetRoomArchived_Handler,
		},
		{
			MethodName: "SetRoomPublished",
			Handler:    _RoomService_SetRoomPublished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room_service.proto",
}
